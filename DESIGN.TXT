DESIGN DOC FOR PROJECT 2 (CODENAME VIRTUALMEM):

BY: 
EHAB MAHRAN (EHABMAHR@BUFFALO.EDU 5011-2241)
ALEX KOFKE (AKOFKE@GMAIL.COM)
LOUIS LAPORT (LOUISLAP@BUFFALO.EDU)


PLAN: 
	1. MAIN METHOD PARSES COMMANDS.
	
	2. FRAME COUNT IS STORED AS AN INT.
	
	3. INPUT FILE IS READ, AND STRING IS BROKEN UP INTO INT ARRAY IN THE SAME ORDER AS INPUT.
	
	4. DEPENDING ON METHOD REQUESTED, EITHER FIFO, LFU, LRU_CLOCK, LRU_STACK, OR LRU_8BIT IS CALLED AND TIMED. THESE METHODS WILL BE GIVEN THE ARGUMENTS (int[] REFLIST, int NUMREFS,
	int FRAMECOUNT) AND WILL RETURN THE AMOUNT OF PAGE MISSES.
	
	5. THEN, OPTIMAL IS ALSO CALLED AND TIMED. GIVEN THE ARGUMENTS (int[] REFLIST, int FRAMECOUNT), OPTIMAL WILL RETURN THE AMOUNT OF PAGE MISSES.
	
	6. THE RESULTS FROM STEPS 4 AND 5 ARE PRINTED OUT TO THE CONSOLE IN THE PROPER FORMAT.
	
FIFO:
	UTILIZED A SINGLE INTEGER ARRAY FOR THE FRAMES, WHERE I USED A FOR LOOP TO PUSH DOWN THE STACK WHEN NEEDED BECAUSE QUEUES ARE
	FOR THE WEAK (AND EFFICIENT).
		PROS: EASY TO IMPLEMENT.
		CONS: NOT AS POTENTIALLY EFFICIENT AS A MORE COMPLICATED LIST ARRANGEMENT.
LFU:
	UTILIZED TWO INTEGER ARRAYS, ONE TO COUNT USAGES AND ONE FOR THE FRAMES.
		PROS: EASY TO IMPLEMENT.
		CONS: THEORETICALLY LIMITED TO 2^32^FRAMECOUNT PAGE HITS BEFORE IT BREAKS.

LRU_STACK:
	UTILIZED A SINGLE INTEGER ARRAY FOR THE FRAMES, WHERE I USED A FOR LOOP TO PUSH DOWN THE STACK WHEN NEEDED BECAUSE QUEUES ARE FOR THE WEAK (AND EFFICIENT)
		PROS: EASY TO IMPLEMENT.
		CONS: NOT AS POTENTIALLY EFFICIENT AS A MORE COMPLICATED LIST ARRANGEMENT.
	
LRU_CLOCK:
	UTILIZED TWO INTEGER ARRAYS, ONE FOR THE REFERENCE BIT AND ONE FOR THE FRAMES.
		PROS: ROTATING OUT REFERENCES EFFICIENT COMPARED TO A LIST IMPLEMENTATION, WORKS AS ADVERTISED IN LECTURE NOTES.
		CONS: ROTATING OUT REFERENCES MORE DIFFICULT TO KEEP TRACK OF IN MY HEAD WHILE WRITING CODE COMPARED TO A LIST IMPLEMENTATION, WHICH WOULD BE SLIGHTLY LESS COMPLICATED.

LRU_8BIT
	UTILIZED TWO INTEGER ARRAYS, ONE FOR THE REFERENCE BYTE AND ONE FOR THE FRAMES.
		PROS: FAIRLY EFFICIENT, NO WIERD LIST WITCHCRAFT. JUST A MAN AND HIS BYTES.
		CONS: TWO INTEGER ARRAYS ARE MORE THAN CAPABLE OF HANDLING ANY TASKS THAT DOESN'T REQUIRE CONSTANT CYCLING ARRAY CONTENTS, SO I FEEL THAT THIS IS OPTIMAL.

OPTIMAL
	UTILIZED TWO INTEGER ARRAYS, ONE TO COUNT HOW FAR AWAY THE NEXT USAGE OF THE MEMORY PAGE IS, AND ONE TO KEEP TRACK OF FRAMES
		PROS: MORE PROCESSOR EFFICIENT THAN RECHECKING THE NEXT PAGE ON EVERY FRAME SWAP.
		CONS: MORE DIFFICULT TO IMPLEMENT, AND HAS SLIGHTLY MORE MEMORY OVERHEAD THAN CHECKING EVERY PAGE EVERY TIME.
		
THIS IS ALL POSSIBLE THANKS TO:
https://en.wikipedia.org/wiki/Page_replacement_algorithm FOR HELP WITH NITTY GRITTY DETAILS
http://www.slideshare.net/guest628caa/lru-stack FOR HELPING ME DIFFERENTIATE BETWEEN LRU_STACK AND FIFO
